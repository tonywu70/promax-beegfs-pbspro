{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "nodeSettings": {
      "type": "object",
      "metadata": {
        "Description": "node settings object"
      }
    },
    "nodeOSSettings": {
      "type": "object",
      "metadata": {
        "Description": "node OS settings object"
      }
    },
    "vmssName": {
      "type": "string",
      "metadata": {
        "description": "String used as a base for naming resources. Must be 3-61 characters in length and globally unique across Azure. A hash is prepended to this string for some resources, and resource-specific information is appended."
      },
      "maxLength": 61
    },
    "instanceCount": {
      "type": "int",
      "metadata": {
        "description": "Number of VM instances (1000 or less)."
      },
      "maxValue": 1000
    },
    "newStorageAccountSuffix": {
      "type": "string"
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "password for the Virtual Machine."
      }
    },
    "postInstallCommand": {
      "type": "string",
            "metadata": {
        "description": "post install command to run as a post script install"
      }
    }
  },
  "variables": {
    "location": "[resourceGroup().location]",
    "namingInfix": "[toLower(take(concat(parameters('vmssName'), uniqueString(resourceGroup().id)), 9))]",
    "vnetID": "[resourceId(parameters('nodeSettings').vnetRG, 'Microsoft.Network/virtualNetworks', parameters('nodeSettings').vnetName)]",
    "subnetRef": "[concat(variables('vnetID'),'/subnets/', parameters('nodeSettings').subnetName)]",
    "nicName": "[concat(variables('namingInfix'), 'nic')]",
    "lbName": "[concat(variables('namingInfix'), 'lb')]",
    "pipName": "[concat(variables('namingInfix'), 'pip')]",
    "lbID": "[resourceId('Microsoft.Network/loadBalancers/', variables('lbName'))]",

    "ipConfigName": "[concat(variables('namingInfix'), 'ipconfig')]",
    "computeApiVersion": "2016-04-30-preview",
    "networkApiVersion": "2016-03-30",
    "natStartPort": 50000,
    "natEndPort": 50119,
    "natBackendPort": 22,
    "ScriptsOptions": {
      "none": {
        "params": ""
      },
      "nfsonmaster": {
        "params": " -S nfsonmaster"
      },
      "beegfs": {
        "params": " -S beegfs"
      },
       "otherstorage": {        
        "params": " -S otherstorage"
      },
      "ganglia": {
        "params": " -n ganglia"
      },
      "pbspro": {
        "params": "[concat(' -s pbspro -q ', parameters('vmssName'))]"
      },
      "master": {
        "params": "[concat(' -m ', parameters('nodeSettings').MasterName)]"
      },
      "nasname": {
        "params": "[concat(' -x ', parameters('nodeSettings').nasname)]"
      },
      "nasdevice": {
        "params": "[concat(' -y ', parameters('nodeSettings').nasdevice)]"
      },
      "nasmount": {
        "params": "[concat(' -z ', parameters('nodeSettings').mountPoint)]"
      },
      "dnsServerName": {
        "params": "[concat(' -f ', parameters('nodeSettings').dnsServerName)]"
      },
      "dnsServerIP": {
        "params": "[concat(' -g ', parameters('nodeSettings').dnsServerIP)]"
      },       
      "nfsservername": {
        "params": "[concat(' -k ', parameters('nodeSettings').nfsservername)]"
      },
      "postinstall": {
        "params": "[concat(' -c ', parameters('postInstallCommand'))]"
      }
    },
    "cnSetupScript": "cn-setup.sh",
    "vmScripts": {
      "scriptsToDownload": [
        "[uri(deployment().properties.templateLink.uri, variables('cnSetupScript'))]",
        "[uri(deployment().properties.templateLink.uri, 'BeeGFS/install_beegfs.sh')]",
        "[uri(deployment().properties.templateLink.uri, 'PBSPro/install_pbspro.sh')]",
        "[uri(deployment().properties.templateLink.uri, 'PBSPro/pbs_selfregister.sh')]",
        "[uri(deployment().properties.templateLink.uri, 'otherstorage/other_nas.sh')]",
        "[uri(deployment().properties.templateLink.uri, 'Ganglia/install_ganglia.sh')]"
      ],
      "commandToExecute": "[concat('bash ', variables('cnSetupScript'), variables('ScriptsOptions')['master'].params, variables('ScriptsOptions')['nasname'].params, variables('ScriptsOptions')['nasdevice'].params, variables('ScriptsOptions')['nasmount'].params, variables('ScriptsOptions')['dnsServerName'].params, variables('ScriptsOptions')['dnsServerIP'].params, variables('ScriptsOptions')[parameters('nodeSettings').scheduler].params, variables('ScriptsOptions')[parameters('nodeSettings').sharedStorage].params, variables('ScriptsOptions')[parameters('nodeSettings').monitoring].params, variables('ScriptsOptions')['postinstall'].params, variables('ScriptsOptions')['nfsservername'].params)]"
    },
    "sshKeyPath": "[concat('/home/',parameters('nodeOSSettings').adminUserName,'/.ssh/authorized_keys')]"
  },
  "resources": [
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('pipName')]",
      "apiVersion": "2016-12-01",
      "location": "[resourceGroup().location]",
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[variables('pipName')]"
        }
      }
    },
    {
      "type": "Microsoft.Network/loadBalancers",
      "name": "[variables('lbName')]",
      "apiVersion": "2016-12-01",
      "location": "[resourceGroup().location]",
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "LoadBalancerFrontEnd",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIpAddresses', variables('pipName'))]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "bepool"
          }
        ],
        "inboundNatPools": [
          {
            "name": "natpool",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('lbName')), '/frontendIPConfigurations/loadBalancerFrontEnd')]"
              },
              "protocol": "tcp",
              "frontendPortRangeStart": "[variables('natStartPort')]",
              "frontendPortRangeEnd": "[variables('natEndPort')]",
              "backendPort": "[variables('natBackendPort')]"
            }
          }
        ]
      },
      "dependsOn": [
        "[variables('pipName')]"
      ]
    },
    {
      "type": "Microsoft.Compute/virtualMachineScaleSets",
      "name": "[parameters('vmssName')]",
      "location": "[variables('location')]",
      "apiVersion": "[variables('computeApiVersion')]",
      "dependsOn": [
        "[variables('lbName')]"
      ],
      "sku": {
        "name": "[parameters('nodeSettings').VMsku]",
        "tier": "Standard",
        "capacity": "[parameters('instanceCount')]"
      },
      "properties": {
        "singlePlacementGroup": true,
        "overprovision": true,
        "upgradePolicy": {
          "mode": "Manual"
        },
        "virtualMachineProfile": {
          "networkProfile": {
            "networkInterfaceConfigurations": [
              {
                "name": "[variables('nicName')]",
                "properties": {
                  "primary": true,
                  "ipConfigurations": [
                    {
                      "name": "[variables('ipConfigName')]",
                      "properties": {
                        "subnet": {
                          "id": "[variables('subnetRef')]"
                        },
                        "loadBalancerInboundNatPools": [
                          {
                            "id": "[concat(variables('lbID'), '/inboundNatPools/natpool')]"
                          }
                        ],
                        "loadBalancerBackendAddressPools": [
                          {
                            "id": "[concat(variables('lbID'), '/backendAddressPools/bepool')]"
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "osProfile": {
            "computerNamePrefix": "[variables('namingInfix')]",
            "adminUsername": "[parameters('nodeOSSettings').adminUserName]",
            "linuxConfiguration": {
              "disablePasswordAuthentication": "true",
              "ssh": {
                "publicKeys": [
                  {
                    "path": "[variables('sshKeyPath')]",
                    "keyData": "[parameters('nodeOSSettings').sshKeyData]"
                  }
                ]
              }
            }
          },
          "storageProfile": {
            "imageReference": "[parameters('nodeOSSettings').imageReference]",
            "osDisk": {
              "createOption": "FromImage",
              "caching": "ReadOnly"
            },
            "dataDisks": []
          },
          "extensionProfile": {
            "extensions": [
              {
                "name": "installCN",
                "properties": {
                  "publisher": "Microsoft.Azure.Extensions",
                  "type": "CustomScript",
                  "typeHandlerVersion": "2.0",
                  "autoUpgradeMinorVersion": true,
                  "settings": {
                    "fileUris": "[variables('vmScripts').scriptsToDownload]",
                    "commandToExecute": "[variables('vmScripts').commandToExecute]",
                    "timestamp": 12345
                  }
                }
              }
            ]
          }
        }
      }
    }
  ]
}

